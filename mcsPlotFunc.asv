function mcsPlotFunc(t,plot_type,varargin)
% mcsPlotFunc(t,plot_type,varargin)
%
% plot a track. this is mcs, so maybe plot something like a psychometric
% function, or override to plot a confusion matrix?
%
% definitely override with something that groups the different variables
%
% I'm leaving this partially implemented. Feel free to add plot types to
% this default function, if you write generally useful ones. Otherwise, for
% specific plotting, use this for ideas and override with something
% appropriate to your experiment. 

tracked_vars = get(t,'params','tracked_vars');

varnames = fieldnames(tracked_vars);

if nargin<2
    plot_type = 'psychometric';
end

switch plot_type
    
    case 'scatter'
        ind_vars = get(t,'trialdata',varnames{1});
        response = get(t,'trialdata','response');
        if length(varnames) == 1 % one variable. just plot it
            plot(ind_vars(1:length(response)),response,'o');
        else
            cat_vars = get(t,'trialdata',varnames{2}); % use variable 2 for category
            cats = unique(cat_vars);
            mysim = 'o+sd*x<>^v';
            cla; hold on;
            for ivar = 1:length(cats)
                incat = find(cat_vars==cats(i));
                plot(ind_vars(incat),response(incat),mysym(ivar));
            end
            hold off
        end
        xlabel(varnames{1});
        ylabel('Response');
    case 'means'
        % not implemented
    case 'psychometric'
        correct = get(t,'trialdata','correct');
        ind_vars = get(t,'trialdata',varnames{1});
        ind_vars = ind_vars(1:length(correct)); % only plot the trials we have run.
        ind_vals = tracked_vars.(varnames{1});
        pc = zeros(size(ind_vals));
        sd = zeros(size(ind_vals));
        for i = 1:length(ind_vals)
            icor = correct(find(ind_vars==ind_vals(i)));
            if ~isempty(icor)
                pc(i) = mean(icor);
                sd(i) = std(icor);
            end
        end
        errorbar(ind_vals,pc,sd);
        xlabel(varnames{1});
        ylabel('Percent Correct');
        
    case 'confusion'
        response = get(t,'trialdata','response');
        target = get(t,'trialdata','target');
        
        ut = unique(target);
        ur = unique(response);
        % myprop are proportions
        for i = 1:length(ut)
            for j = 1:length(ur)
                myprop(i,j) = sum(target==ut(i) & response==ur(j));
            end
        end
        
        disp(myprop)
        % not implemented
    
end
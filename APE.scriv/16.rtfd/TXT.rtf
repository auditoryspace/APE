{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;\f1\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;}
\deftab720
\pard\pardeftab720\ql\qnatural\pardirnatural

\f0\fs24 \cf0 Programming experiments with the APE (Abstract Program for Experiments)\
\
Chris Stecker\
\
1. What is APE? \
\
APE (Abstract Program for Experiments) is a set of MATLAB software components designed to facilitate rapid development of psychoacoustical experiments using Tucker-Davis Technologies (TDT) System 3 signal-processing hardware. The current version, APE 0.2, implements additional methods that allow local (soundcard) audio presentation, and (within limits) support of both local and TDT audio in the same program. Thus, APE programs can be prototyped and tested on a standalone PC, and then dropped into a TDT-based setup for lab testing. \
\
The development of APE originated in my lab at the University of Washington as an approach to programming experiments that were easily expandable to accommodate new experimental methods. Software frameworks developed in my lab were generalized and provided to colleagues with similar needs. As our repertoire of experimental techniques expanded it became clear that we needed an abstract framework for experimental programs; one that would provide useful default behaviors but allow customization to perform arbitrary experimental tasks. The software base for APE was completely revised during June 2007, when I spent a month at the National Center for Rehabilitative Auditory Research (NCRAR) of the Portland Oregon VA Medical Center. There, collaborating with Erick Gallun, Michelle Molis, and Marjorie Leek, I wrote most of the code for the first full version of APE, APE zero. \
\
The goals for APE\'92s development included a modular framework for experiment development using TDT System 3 and MATLAB. We wanted experiment programs to be easy to understand, with key elements maintained in logical places, consistent programming across experiments, and easy-to-access default or reusable functions. We wanted a modular design, so that individual components of a program could be easily modified or replaced, experiments could be upgraded without maintaining multiple versions, and commonly used code could be easily maintained and shared. Finally, we wanted APE to include as much device-independent behavior as possible, so that different TDT hardware setups could run the same programs with identical methods, and working experiments could be easily modified to use different methods (for example, switching from a button box to a touch-screen for subject testing).\
\
Two major design decisions were made to support these goals. The first was to use object-oriented programming (\'93Classes and objects\'94 in MATLAB terminology) so that related data could be grouped together, along with relevant functions. Object-oriented programming offers other advantages, too, such as hiding implementation details, code customization via \'93subclasses,\'94 etc. Please refer to MATLAB documentation for more information about classes and objects. The second design decision was to use function handles for customize experiments. Thus, common experimental procedures such \'93make a new stimulus\'94 are defined in APE (in this case by the 
\f1\fs22 stim
\f0\fs24  class method 
\f1\fs22 goMakeStim
\f0\fs24 ), and these function calls are mapped to either default or custom functions written by the experiment. In this example, those functions are indicated by the 
\f1\fs22 stim
\f0\fs24  property 
\f1\fs22 makeStimFunc
\f0\fs24 . The use of function handles means that the actual code underlying experiment events in APE is 
\i abstract
\i0 , in that it does not tell MATLAB specifically what to do, but rather where to look for the necessary instructions. Please refer to MATLAB documentation for more about function handles. \
\
}